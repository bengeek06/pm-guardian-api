
"""
app.schemas.user_role_schema
---------------------------

Defines the Marshmallow UserRoleSchema for the PM Guardian API.
Provides serialization, deserialization, and validation logic for user-role
associations, ensuring data integrity and proper formatting in API requests
and responses.
"""

import uuid
from marshmallow_sqlalchemy import SQLAlchemyAutoSchema
from marshmallow import fields, post_load, ValidationError, validate
from app.models.user_role import UserRole


class UserRoleSchema(SQLAlchemyAutoSchema):
    """
    Marshmallow schema for the UserRole model.

    Handles serialization and deserialization of UserRole model instances,
    including validation of input data for creating or updating user-role
    associations, and formatting output for API responses.

    Attributes:
        Meta (class): Configuration for the schema, including model binding
            and field options.
        id (fields.String): Unique identifier for the user-role association
            (read-only).
        user_id (fields.String): Unique identifier of the user (required).
        role_id (fields.String): Unique identifier of the role (required).
        company_id (fields.String): Unique identifier of the company (required).
        created_at (fields.DateTime): Creation timestamp (read-only).
        updated_at (fields.DateTime): Update timestamp (read-only).
    """

    def __init__(self, *args, **kwargs):
        """
        Initialize the UserRoleSchema instance.

        Args:
            *args: Positional arguments for the parent constructor.
            **kwargs: Keyword arguments for the parent constructor.
        """
        self.context = kwargs.pop('context', {})
        super().__init__(*args, **kwargs)

    @post_load
    def ensure_id(self, data, **kwargs):
        """
        Generate a UUID on the backend if missing when creating a UserRole.

        Args:
            data (dict or object): The data to process after loading.
            **kwargs: Additional keyword arguments.

        Returns:
            dict or object: The processed data with a generated UUID if needed.
        """
        _ = kwargs
        if hasattr(data, 'id'):
            if not getattr(data, 'id', None):
                data.id = str(uuid.uuid4())
        else:
            data['id'] = str(uuid.uuid4())
        # Ensure all IDs are strings (safety)
        for key in ('id', 'user_id', 'role_id', 'company_id'):
            if hasattr(data, key) and not isinstance(getattr(data, key), str):
                setattr(data, key, str(getattr(data, key)))
            elif (
                isinstance(data, dict)
                and key in data
                and not isinstance(data[key], str)
            ):
                data[key] = str(data[key])
        return data

    class Meta:
        """
        Configuration class for UserRoleSchema.

        Specifies schema options such as the model to bind, whether to load
        instances, inclusion of foreign keys, and fields that are read-only
        during serialization.
        """
        model = UserRole
        load_instance = True
        include_fk = True
        dump_only = ('id', 'created_at', 'updated_at')

    id = fields.String(
        dump_only=True,
        metadata={
            "description": (
                "Always generated by backend. "
                "Never accepted from client input."
            )
        }
    )

    @staticmethod
    def not_whitespace(value):
        """
        Validate that a string field is not blank or whitespace only.

        Args:
            value (str): The value to validate.

        Raises:
            ValidationError: If the value is blank or whitespace only.
        """
        if not isinstance(value, str) or not value.strip():
            raise ValidationError(
                "Field cannot be blank or whitespace only."
            )

    user_id = fields.String(
        required=True,
        validate=[validate.Length(min=1), not_whitespace]
    )
    role_id = fields.String(
        required=True,
        validate=[validate.Length(min=1), not_whitespace]
    )
    company_id = fields.String(
        required=True,
        validate=[validate.Length(min=1), not_whitespace]
    )
    created_at = fields.DateTime(dump_only=True)
    updated_at = fields.DateTime(dump_only=True)
